/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/id/register": {
    /**
     * Creates a new agent account and sends a verification email address.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
      responses: {
        /**
         * Successfully created agent account
         */
        "200": {
          "application/json": components["schemas"]["GeneralResponse"];
        };
        "400": unknown;
        "500": unknown;
      };
    };
  };
  "/id/inspect": {
    /**
     * Returns information about a session token.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["InspectRequest"];
      };
      responses: {
        /**
         * Token information
         */
        "200": {
          "application/json": components["schemas"]["InspectResponse"];
        };
        "400": unknown;
        "500": unknown;
      };
    };
  };
  "/id/verify": {
    /**
     * Sets user account to verified after validating email address. It should
     * be called after the user views and accepts the terms of service.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["VerifyRequest"];
      };
      responses: {
        /**
         * Successfully activated account
         */
        "200": {
          "application/json": components["schemas"]["GeneralResponse"];
        };
        "400": unknown;
        "500": unknown;
      };
    };
  };
  "/id/reset": {
    /**
     * If registered, sends a password reset email to the provided email address.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["ResetRequest"];
      };
      responses: {
        /**
         * Successfully sent password reset email
         */
        "200": {
          "application/json": components["schemas"]["GeneralResponse"];
        };
        "400": unknown;
        "500": unknown;
      };
    };
  };
  "/id/setPass": {
    /**
     * Sets a new password using a token from the reset password email.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["SetPassRequest"];
      };
      responses: {
        /**
         * Successfully updated password
         */
        "200": {
          "application/json": components["schemas"]["GeneralResponse"];
        };
        "400": unknown;
        "500": unknown;
      };
    };
  };
  "/id/login": {
    /**
     * Peforms user authentication and returns a Bearer token for API usage.
     * The token must be sent in an `Authorization` header for all secured requests.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["LoginRequest"];
      };
      responses: {
        /**
         * Successful authentication
         */
        "200": {
          "application/json": components["schemas"]["LoginResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
  };
  "/id/logout": {
    /**
     * Clears the user session and invalidates the provided Bearer token.
     */
    post: {
      requestBody: {
        "application/json": components["schemas"]["LogoutRequest"];
      };
      responses: {
        /**
         * Successful logout
         */
        "200": {
          "application/json": components["schemas"]["GeneralResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
  };
  "/api/provider": {
    /**
     * Lists all providers known to the system.
     */
    get: {
      responses: {
        /**
         * Successful logout
         */
        "200": {
          "application/json": components["schemas"]["ProviderListResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
  };
  "/api/deviceType": {
    /**
     * Lists all devices types
     */
    get: {
      responses: {
        /**
         * Successful
         */
        "200": {
          "application/json": components["schemas"]["DeviceTypeListResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
    post: {
      requestBody: {
        "application/json": components["schemas"]["DeviceTypeCreateRequest"];
      };
      responses: {
        /**
         * Successful
         */
        "200": {
          "application/json": components["schemas"]["DeviceTypeCreateResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
  };
  "/api/device": {
    /**
     * Lists all devices
     */
    get: {
      responses: {
        /**
         * Successful
         */
        "200": {
          "application/json": components["schemas"]["DeviceListResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
    post: {
      requestBody: {
        "application/json": components["schemas"]["DeviceCreateRequest"];
      };
      responses: {
        /**
         * Successful
         */
        "200": {
          "application/json": components["schemas"]["DeviceCreateResponse"];
        };
        "400": unknown;
        "401": unknown;
        "500": unknown;
      };
    };
  };
}

export interface operations {}

export interface components {
  schemas: {
    GeneralResponse: {
      /**
       * Indicator of successful request
       */
      success: boolean;
      /**
       * Request specific response
       */
      data: string;
    };
    RegisterRequest: {
      /**
       * First name
       */
      firstName: string;
      /**
       * Last name
       */
      lastName: string;
      /**
       * User email address
       */
      email: string;
      /**
       * User password
       */
      password: string;
    };
    InspectRequest: {
      /**
       * Token to inspect
       */
      token: string;
    };
    InspectResponse: {
      /**
       * Token identifier
       */
      identifier: string;
      /**
       * RFC3339 expiry time
       */
      expiry: string;
      /**
       * Type of token
       */
      type: "activate" | "reset" | "auth";
      /**
       * First name
       */
      firstName: string;
      /**
       * Last name
       */
      lastName: string;
      /**
       * User email address
       */
      email: string;
    };
    VerifyRequest: {
      /**
       * Verification token from account activation email
       */
      token: string;
    };
    ResetRequest: {
      /**
       * Email address for password reset
       */
      email: string;
    };
    SetPassRequest: {
      /**
       * Reset token from reset password email
       */
      token: string;
      /**
       * New user password
       */
      password: string;
    };
    LoginRequest: {
      /**
       * User email
       */
      email: string;
      /**
       * User password
       */
      password: string;
    };
    LoginResponse: {
      /**
       * Bearer token for API usage
       */
      token: string;
    };
    LogoutRequest: {
      /**
       * Bearer token to perform logout
       */
      token: string;
    };
    ProviderListResponse: {
      providers?: {
        /**
         * UUID of the provider
         */
        uuid?: string;
        /**
         * Name of the provider
         */
        name?: string;
        /**
         * Per data source settings
         */
        dataSourceSettings?: {
          /**
           * UUID of the data source setting
           */
          uuid?: string;
          /**
           * Name of the data source setting
           */
          name?: string;
          /**
           * Example of a value for this data source setting
           */
          example?: string;
          /**
           * Possible values for this setting, if this array is empty then show a text input box, if not show a dropdown with these options
           */
          options?: {
            /**
             * Value of the setting to send
             */
            value?: string;
            /**
             * Name of the setting to show in the dropdown
             */
            name?: string;
          }[];
        }[];
        /**
         * Per device settings
         */
        deviceSettings?: {
          /**
           * UUID of the device setting
           */
          uuid?: string;
          /**
           * Name of the device setting
           */
          name?: string;
          /**
           * Example of a value for this device setting
           */
          example?: string;
          /**
           * Possible values for this setting, if this array is empty then show a text input box, if not show a dropdown with these options
           */
          options?: {
            /**
             * Value of the setting to send
             */
            value?: string;
            /**
             * Name of the setting to show in the dropdown
             */
            name?: string;
          }[];
        }[];
      }[];
    };
    DeviceTypeListResponse: {
      deviceTypes?: {
        /**
         * UUID of the device type
         */
        uuid?: string;
        /**
         * Name of the device type
         */
        name?: string;
        providerBlocks?: {
          /**
           * UUID of the provider for this block
           */
          providerUUID?: string;
          /**
           * Name of the provider for this block
           */
          providerName?: string;
          /**
           * Per device settings
           */
          deviceSettings?: {
            /**
             * UUID of the device setting
             */
            uuid?: string;
            /**
             * Name of the device setting
             */
            name?: string;
            /**
             * Example of a value for this device setting
             */
            example?: string;
            /**
             * Possible values for this setting, if this array is empty then show a text input box, if not show a dropdown with these options
             */
            options?: {
              /**
               * Value of the setting to send
               */
              value?: string;
              /**
               * Name of the setting to show in the dropdown
               */
              name?: string;
            }[];
          }[];
        }[];
      }[];
    };
    DeviceTypeCreateResponse: {
      /**
       * If the creation succeeded
       */
      success?: boolean;
      /**
       * An error message if the creation failed
       */
      message?: string;
      deviceType?: {
        /**
         * UUID of the device type
         */
        uuid?: string;
        /**
         * Name of the device type
         */
        name?: string;
        providerBlocks?: {
          /**
           * UUID of the provider for this block
           */
          providerUUID?: string;
          /**
           * Name of the provider for this block
           */
          providerName?: string;
          /**
           * Per device settings
           */
          deviceSettings?: {
            /**
             * UUID of the device setting
             */
            uuid?: string;
            /**
             * Name of the device setting
             */
            name?: string;
            /**
             * Example of a value for this device setting
             */
            example?: string;
            /**
             * Possible values for this setting, if this array is empty then show a text input box, if not show a dropdown with these options
             */
            options?: {
              /**
               * Value of the setting to send
               */
              value?: string;
              /**
               * Name of the setting to show in the dropdown
               */
              name?: string;
            }[];
          }[];
        }[];
      };
    };
    DeviceTypeCreateRequest: {
      /**
       * Name of the device type
       */
      name?: string;
      providerBlocks?: {
        /**
         * UUID of the provider for this block
         */
        providerUUID?: string;
        /**
         * This provider block's data sources
         */
        dataSources?: {
          /**
           * Name of this data source
           */
          name?: string;
          type?: "timeseries" | "states" | "events";
          /**
           * Values for this data source's setting
           */
          settings?: { [key: string]: any };
        }[];
      }[];
    };
    DeviceListResponse: {
      devices?: {
        /**
         * UUID of the device
         */
        uuid?: string;
        /**
         * Name of the device
         */
        name?: string;
        /**
         * UUID of the type for this device
         */
        deviceTypeUUID?: string;
        /**
         * Settings for this device, has an object within it for each provider block in the device type.
         */
        settings?: { [key: string]: any };
      }[];
    };
    DeviceCreateRequest: {
      /**
       * Name of the device
       */
      name?: string;
      /**
       * UUID of the type for this device
       */
      deviceTypeUUID?: string;
      /**
       * Settings for this device, has an object within it for each provider block in the device type.
       */
      settings?: { [key: string]: any };
    };
    DeviceCreateResponse: {
      /**
       * UUID of the device
       */
      uuid?: string;
      /**
       * Name of the device
       */
      name?: string;
      /**
       * UUID of the type for this device
       */
      deviceTypeUUID?: string;
      /**
       * Settings for this device, has an object within it for each provider block in the device type.
       */
      settings?: { [key: string]: any };
    };
  };
  responses: {
    /**
     * Successful request
     */
    Success: { [key: string]: any };
    /**
     * Bad request format
     */
    BadRequest: { [key: string]: any };
    /**
     * Invalid permissions or invalid Authorization header
     */
    Unauthorized: { [key: string]: any };
    /**
     * Unexpected error
     */
    InternalServerError: { [key: string]: any };
  };
}
